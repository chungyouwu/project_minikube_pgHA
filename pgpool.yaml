#pgpool
apiVersion: v1  
kind: ConfigMap
metadata:
  name: pgpool-config
  labels:
    name: pgpool-config
data:
  pgpool.conf: |-
    listen_addresses = '*'
    port = 9999
    socket_dir = '/var/run/pgpool'
    pcp_listen_addresses = '*'
    pcp_port = 9898
    pcp_socket_dir = '/var/run/pgpool'
    backend_hostname0 = 'postgres-svc'
    backend_port0 = 5432
    backend_weight0 = 1
    backend_flag0 = 'ALLOW_TO_FAILOVER'
    backend_hostname1 = 'replica1-svc'
    backend_port1 = 5432
    backend_weight1 = 2
    backend_flag1 = 'ALLOW_TO_FAILOVER'
    backend_hostname2 = 'replica2-svc'
    backend_port2 = 5432
    backend_weight2 = 2
    backend_flag2 = 'ALLOW_TO_FAILOVER'    


    sr_check_period = 10
    sr_check_user = 'postgres'
    sr_check_password = '0000'
    sr_check_database = 'postgres'
    health_check_timeout = '20'
    health_check_user = 'postgres'
    health_check_password = '0000'
    health_check_period = 10
    backend_clustering_mode = 'streaming_replication'
    num_init_children = 32
    max_pool = 4
    child_life_time = 300
    child_max_connections = 0
    connection_life_time = 0
    client_idle_limit = 0
    connection_cache = on
    load_balance_mode = on
    ssl = on
    enable_pool_hba = on
    failover_on_backend_error = on
    log_min_messages = warning
    failover_command = '/test/failover.sh "%d" "%h" "%p" "%D" "%m" "%M" "%H" "%P" "%r" "%R"'
    follow_primary_command = '/test/follow_primary.sh "%d" "%h" "%p" "%D" "%m" "%M" "%H" "%P" "%r" "%R"'



---
apiVersion: v1
kind: ConfigMap
metadata:
  name: failover-script
data:
  failover.sh: |
    #!/bin/bash

    failed_node_id=$1
    failed_host_name=$2
    failed_port=$3
    failed_db_cluster=$4
    new_main_id=$5
    old_main_id=$6
    new_main_host_name=$7
    old_primary_node_id=$8
    new_main_port_number=$9
    new_main_db_cluster=${10}

    failed_node_id_trimmed=$(echo "$failed_node_id" | sed 's/^ *//;s/ *$//')
    old_main_id_trimmed=$(echo "$old_main_id" | sed 's/^ *//;s/ *$//')

    log="/test/failover.log"    

    touch $log
    if [ $? -ne 0 ]; then
      echo "Cannot write to log file: $log"
      exit 1
    fi 

    date >> $log
    echo "failed_node_id: $failed_node_id" >> $log
    echo "failed_host_name: $failed_host_name" >> $log
    echo "failed_port: $failed_port" >> $log
    echo "failed_db_cluster: $failed_db_cluster" >> $log
    echo "new_main_id: $new_main_id" >> $log
    echo "old_main_id: $old_main_id" >> $log
    echo "new_main_host_name: $new_main_host_name" >> $log
    echo "old_primary_node_id: $old_primary_node_id" >> $log
    echo "new_main_port_number: $new_main_port_number" >> $log
    echo "new_main_db_cluster: $new_main_db_cluster" >> $log

    export PGPASSWORD='0000'

    if [ a"$old_main_id_trimmed" = a"$failed_node_id_trimmed" ];then        
        echo "promoting replica DB " >> $log
        psql -h "$new_main_host_name" -p $new_main_port_number -U postgres -c "SELECT pg_promote(true);" >> $log

        echo "start checking promoting result" >> $log
        psql -h "$new_main_host_name" -p $new_main_port_number -U postgres -c "SELECT pg_is_in_recovery();" >> $log

        echo "change primary_conninfo in old replica DB(new master DB)" >> $log
        psql -h "$new_main_host_name" -p $new_main_port_number -U postgres -c "ALTER SYSTEM SET primary_conninfo = 'host=replica1-svc port=5432 user=postgres password=''0000''';" >> $log

        echo "reloading new master DB" >> $log
        psql -h "$new_main_host_name" -p $new_main_port_number -U postgres -c "SELECT pg_reload_conf();"
        sleep 3
    else
        echo "failed_node_id not equal to old_primary_node_id" >> $log
           
    fi

    echo "DEBUG INFO:" >> $log
    echo "Parameters received:" >> $log
    echo "$@" >> $log


---
apiVersion: v1
kind: ConfigMap
metadata:
  name: followprimary-script
data:  
  follow_primary.sh: |
    #!/bin/bash
    # This script is run after failover_command to synchronize the Standby with the new Primary.
    # First try pg_rewind. If pg_rewind failed, use pg_basebackup(to be continue...)
    
    log="/test/follow_primary.log"

    touch $log
    if [ $? -ne 0 ]; then
      echo "Cannot write to log file: $log"
      exit 1
    fi     
    
    set -o xtrace

    NODE_ID="$1"
    NODE_ID_TRIMMED=$(echo "$NODE_ID" | sed 's/^ *//;s/ *$//')
    NODE_HOST="$2"
    NODE_PORT="$3"
    NODE_PORT_TRIMMED=$(echo "$NODE_PORT" | sed 's/^ *//;s/ *$//')
    NODE_PGDATA="/var/lib/postgresql/data"
    NEW_PRIMARY_NODE_ID="$5"
    NEW_PRIMARY_NODE_ID_TRIMMED=$(echo "$NEW_PRIMARY_NODE_ID" | sed 's/^ *//;s/ *$//')
    OLD_MAIN_NODE_ID="$6"
    NEW_PRIMARY_NODE_HOST="$7"
    OLD_PRIMARY_NODE_ID="$8"
    NEW_PRIMARY_NODE_PORT="$9"
    NEW_PRIMARY_NODE_PGDATA="/var/lib/postgresql/data"
    PGHOME="/usr/libexec/postgresql15/"

    date >> $log
    echo "node_id: $NODE_ID" >> $log
    echo "node_id_trimmed: $NODE_ID_TRIMMED" >> $log
    echo "node_host: $NODE_HOST" >> $log
    echo "node_port: $NODE_PORT" >> $log
    echo "node_port_trimmed: $NODE_PORT_TRIMMED" >> $log
    echo "old_primary_node_id: $OLD_PRIMARY_NODE_ID" >> $log
    echo "old_main_node_id: $OLD_MAIN_NODE_ID" >> $log
    echo "new_primary_node_id: $NEW_PRIMARY_NODE_ID" >> $log
    echo "new_primary_node_id_trimmed: $NEW_PRIMARY_NODE_ID_TRIMMED" >> $log
    echo "new_primary_node_host: $NEW_PRIMARY_NODE_HOST" >> $log    
    echo "new_primary_node_port: $NEW_PRIMARY_NODE_PORT" >> $log
    echo "new_primary_node_pgdata: $NEW_PRIMARY_NODE_PGDATA" >> $log
    echo "node_pgdata: $NODE_PGDATA" >> $log


    # sshpass to every nodes(except new primary DB node) and renew the primary conninfo 
    sshpass -p 0000 ssh -p 22 -o StrictHostKeyChecking=no root@${NODE_HOST}.default.svc.cluster.local "
    if [ $NODE_ID_TRIMMED -ne $OLD_MAIN_NODE_ID ]; then
      chown -R postgres:postgres ${NODE_PGDATA}
      chmod 0700 ${NODE_PGDATA}
      su -c \"/usr/lib/postgresql/16/bin/pg_isready -h localhost -p 5432\" - postgres
      su -c \"/usr/lib/postgresql/16/bin/pg_ctl -D /var/lib/postgresql/data stop\" - postgres
      su -c \"/usr/lib/postgresql/16/bin/pg_rewind -D ${NODE_PGDATA} --source-server=\\\"user=postgres password=0000 host=${NEW_PRIMARY_NODE_HOST}.default.svc.cluster.local port=${NEW_PRIMARY_NODE_PORT} dbname=postgres\\\"\" - postgres
      echo \"primary_conninfo = 'host=${NEW_PRIMARY_NODE_HOST}.default.svc.cluster.local port=${NEW_PRIMARY_NODE_PORT} user=postgres application_name=${NODE_HOST}'\" >> ${NODE_PGDATA}/postgresql.auto.conf
      echo \"recovery_target_timeline = latest\" >>  ${NODE_PGDATA}/postgresql.auto.conf

      # 刪除舊的 primary_conninfo 資訊
      sed -i -e \"0,/^primary_conninfo = .*/d\" ${NODE_PGDATA}/postgresql.auto.conf
      touch ${NODE_PGDATA}/standby.signal

      # 需使用 -l 參數將 pg_ctl start 輸出轉到其他文件, 避免佔用前台導致此腳本後半段全卡住不執行 
      su -c \"/usr/lib/postgresql/16/bin/pg_ctl -D /var/lib/postgresql/data -l /dev/null start\" - postgres
    else
      echo \"node_id is old_main_node_id\"
    fi      
    "

    echo "SSPASS_EXIT_CODE: $?" >> $log


    # attach the renewed standby DB to the pgpool
    if [ $NODE_ID_TRIMMED -ne $OLD_MAIN_NODE_ID ]; then
      echo "THIS IS NOT OLD MAIN NODE(THE STOPPED ONE)" >> $log
      if [ $? -eq 0 ]; then
        /opt/pgpool-II/bin/pcp_attach_node -w -h localhost -U pgpool -p 9898 -n ${NODE_ID}
        echo "CHUNG: pcp_attach_node success, follow primary command is completed successfully" >> $log
      else
        echo "CHUNG: pcp_attach_node failed" >> $log
        exit 1  
      fi    
    else
      echo "I'M THE STOPPED DB, BYE BYE"  >> $log
    fi

    exit 0



---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: pgpool
spec:
  serviceName: pgpool
  replicas: 1
  selector:
    matchLabels:
      app: pgpool
  template:
    metadata:
      labels:
        app: pgpool
    spec:
      securityContext: 
        runAsUser: 0  
        fsGroup: 0    
      
      containers:
      - name: pgpool
        image: poolssh
        imagePullPolicy: IfNotPresent
        lifecycle:
          postStart:
            exec:
              command:  
                - /bin/bash
                - -c
                - |
                  mkdir /test/;
                  cp /script/failover.sh /test/;
                  cp /script/follow_primary.sh /test/;
                  chmod 777 /test/failover.sh;
                  chmod 777 /test/follow_primary.sh;
                  echo 'localhost:9898:pgpool:0000' >> /root/.pcppass;
                  chmod 600 /root/.pcppass;
        env:
        - name: POSTGRES_USERNAME  #在postgres-secret變數為 POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_USER

        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_PASSWORD

        - name: PGPOOL_PASSWORD_ENCRYPTION_METHOD
          value: "scram-sha-256"

        - name: PGPOOL_ENABLE_POOL_PASSWD
          value: "true"

        - name: PGPOOL_SKIP_PASSWORD_ENCRYPTION
          value: "false"

        - name: PGPOOL_PCP_USER
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: PGPOOL_PCP_USER 

        - name: PGPOOL_PCP_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: PGPOOL_PCP_PASSWORD

        - name: PCPPASSFILE
          value: "/root/.pcppass"

        volumeMounts:
        - name: pgpool-config
          mountPath: /config

        - name: failover-script
          mountPath: /script/failover.sh
          subPath: failover.sh

        - name: followprimary-script 
          mountPath: /script/follow_primary.sh
          subPath: follow_primary.sh
          
        #- name: pgpool-tls
        #  mountPath: /config/tls

      volumes:
      - name: pgpool-config
        configMap:  
          name: pgpool-config
      
      - name: failover-script
        configMap:
          name: failover-script

      - name: followprimary-script 
        configMap:
          name: followprimary-script
      # Configure your own TLS certificate.
      # If not set, Pgpool-II will automatically generate the TLS certificate if ssl = on.
      #- name: pgpool-tls
      #  secret:
      #    secretName: pgpool-tls


---
apiVersion: v1
kind: Service
metadata:
  name: pgpool-svc
spec:
  type: NodePort  
  selector:
    app: pgpool
  ports:
  - name: pgpool-port
    protocol: TCP
    port: 9999
    targetPort: 9999
    nodePort: 30007  